name: gdlint on push

on:
  workflow_dispatch:
  pull_request:
    paths:
    - '**/*.gd'

permissions:
  pull-requests: write

concurrency:
  group: gdlint-${{ github.ref }}
  cancel-in-progress: true

jobs:
  gdlint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Find changed GDScript files
        id: changed-files
        uses: tj-actions/changed-files@v46
        with:
          files: '**/*.gd'
          files_ignore: 'addons/**'

      - name: Early exit if no GD files changed
        if: steps.changed-files.outputs.any_changed != 'true'
        run: echo "No GDScript files changed, skipping lint"

      - name: Set up Python with enhanced caching
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            **/requirements*.txt
            **/pyproject.toml
            **/setup.py

      - name: Cache gdtoolkit installation
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/cache@v4
        id: gdtoolkit-cache
        with:
          path: ~/.cache/pip
          key: gdtoolkit-4-${{ runner.os }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            gdtoolkit-4-${{ runner.os }}-

      - name: Lint changed files
        id: lint
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          pip install --no-warn-script-location gdtoolkit==4.*
          # Ensure gdlint command is available
          if ! command -v gdlint &> /dev/null; then
            echo "gdlint could not be found, please check the installation"
            exit 1
          fi
          
          # Convert space-separated list to array and process
          echo "Changed files: ${{ steps.changed-files.outputs.all_changed_files }}"
          echo "Converting changed files to array"
          files_array=(${{ steps.changed-files.outputs.all_changed_files }})
          
          # Early exit if no files to lint
          if [ ${#files_array[@]} -eq 0 ]; then
            echo "No files to lint"
            exit 0
          fi
          
          # Run gdlint on all files at once (faster than individual files)
          echo "Running gdlint on ${#files_array[@]} files"
          set +e
          lint_output=$(gdlint "${files_array[@]}" 2>&1)
          exit_code=$?
          set -e
          echo "gdlint completed with output:"
          echo "$lint_output"
          
          # Use more efficient output method
          {
            echo "lint_output<<EOF"
            echo "$lint_output"
            echo "EOF"
            echo "exit_code=$exit_code"
          } >> $GITHUB_OUTPUT
           
          echo "Linting completed with exit code $exit_code"
          echo "Lint output:"
          echo "$lint_output"
          exit $exit_code
        continue-on-error: true

      - name: Comment PR with gdlint Output
        if: steps.changed-files.outputs.any_changed == 'true' && steps.lint.outputs.lint_output != ''
        uses: thollander/actions-comment-pull-request@v3
        with:
          comment-tag: gdlint-check
          github-token: ${{ secrets.GITHUB_TOKEN }}
          message: |
            ## ðŸ§ª GDScript Lint Check
            
            <details>
            <summary>Lint Output (${{ steps.changed-files.outputs.all_changed_files_count }} files checked)</summary>
            
            ```text
            ${{ steps.lint.outputs.lint_output }}
            ```
            </details>